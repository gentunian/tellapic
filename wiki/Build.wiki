<wiki:toc max_depth="3" />

To build this package you will need cmake installed (2.8 preferred), and svn for download the sources. *Only linux build is supported.*

== Downloading the sources ==

Create a directory to place the sources.

{{{
~ $ mkdir trunk
~ $ cd trunk/
~ $ svn checkout http://tellapic.googlecode.com/svn/trunk/ tellapic-read-only
}}}

When building, you should change to the tellapic-read-only directory.

== Building all ==

You will need this libraries installed on your system:

  * [http://invisible-island.net/cdk/ Curses Development Kit] (CDK library version 5.0). Optional, but you won't be able to 'debug' on-the-fly the server instance.
  * pthread (currently used version 2.12.2).

And this tools:

  * A C compiler for your operating system (Linux or Windows supported).
  * [http://ant.apache.org/bindownload.cgi Apache Ant].
  * [http://download.microsoft.com/download/vc15/patch/1.52/w95/en-us/nmake15.exe NMake] for *Windows*.
  * [http://ftp.gnu.org/gnu/make/make-3.82.tar.gz Make] 3.82 for *Linux*.
  * [http://www.cmake.org/cmake/resources/software.html CMake] 2.8 preferred.
  * [http://www.swig.org SWIG wrapper] (2.0.1).
  * [http://www.oracle.com/technetwork/java/javase/downloads/index.html Java Development Kit] (JDK 1.5 or above).
  * [http://www.python.org/download/ Python] 2.7.1.

{{{
~ $ cd tellapic-read-only/
~ $ mkdir build
~ $ cd build/
~ $ cmake ..
~ $ make
}}}

You can build just the wrapper. The next sections shows how to do it.

== Building wrappers ==

For all wrappers you will need:
  * SWIG wrapper (2.0.1).
  * The correspondent language compiler or development kit.

Building for *java* library:

No extra dependency is needed more than jdk. Version of jdk used was openjdk6.

{{{
~ $ cd tellapic-read-only/
~ $ mkdir build
~ $ cd build/
~ $ cmake ..
~ $ make tellapicjava
}}}

Building for *python* lybrary:

No extra dependency is needed.

{{{
~ $ cd tellapic-read-only/
~ $ mkdir build
~ $ cd build/
~ $ cmake ..
~ $ make pytellapic
}}}

== Building Java GUI ==

There's only a GUI written in Java that uses the native library. Java is portable and almost _write once run everywhere_, but the internal library that specifies tellapic protocol is not. You will need to build the java wrapper first (that is, pass SWIG layer) for windows or linux, depending which OS you are running.

=== Building under Windows ===

For building the windows native library (_tellapicjava.dll_) in conjuction with the SWIG wrapper and Java GUI, follow this steps:

{{{
~ $ cd tellapic-read-only/
~ $ mkdir build-win32
~ $ cd build-win32/
~ $ cmake ..
~ $ nmake tellapicjava
~ $ cd ..
~ $ cd src
~ $ cd client
~ $ cd java
~ $ ant -Dbuild.dir=../../../build-win32
~ $ ant -Dbuild.dir=../../../build-win32 create_run_jar
}}}

The last two steps will compile the Java GUI code, and then will create a runnable jar file called *tellapic-executable.jar* on your build dir (in the example above the build dir is: _build-win32/_).

=== Building under Linux ===

For building the linux native library (_libtellapicjava.so_) in conjunction with the SWIG wrapper and Java GUI, follow this steps:

{{{
~ $ cd tellapic-read-only/
~ $ mkdir build-linux
~ $ cd build-linux/
~ $ cmake ..
~ $ make tellapicjava
~ $ cd ..
~ $ cd src
~ $ cd client
~ $ cd java
~ $ ant -Dbuild.dir=../../../build-linux
~ $ ant -Dbuild.dir=../../../build-linux create_run_jar
}}}

The last two steps will compile the Java GUI code, and then will create a runnable jar file called *tellapic-executable.jar* on your build dir (in the example above the build dir is: _build-linux/_).

=== Running and Testing the Java GUI ==

To run the *tellapic-executable.jar* file created above, you should use the *java -jar* command, but in this case you need to provide the path where the native library is. The path depends where you are building the rule *tellapicjava*. In the above examples, we where building it on _build-win32/_ and _build-linux/_ directory for windows and linux respectively. I will call those directories: _build-dir_, and the root directory (that is, where you checkout the sources) will be called: _tellapic-root_.

So, in order to run and test the Java GUI, you will need to follow this steps on the _tellapic-root_ directory:

{{{
~ $ cd build-dir
~ $ java -Djava.library.path=src/swig/java -jar tellapic-executable.jar
}}}

*NOTE*: Windows users will probably need to change the '/' slash to '\'.

=== Complete Windows procedure build and run Java GUI ===

{{{
~ $ svn checkout http://tellapic.googlecode.com/svn/trunk/ tellapic-read-only
~ $ cd tellapic-read-only/
~ $ mkdir build-win32
~ $ cd build-win3/
~ $ cmake ..
~ $ nmake tellapicjava
~ $ cd ..
~ $ cd src
~ $ cd client
~ $ cd java
~ $ ant -Dbuild.dir=../../../build-win32
~ $ ant -Dbuild.dir=../../../build-win32 create_run_jar
~ $ cd ..
~ $ cd ..
~ $ cd ..
~ $ cd build-win32
~ $ java -Djava.library.path=src\swig\java -jar tellapic-executable.jar
}}}


== Details ==

Useful files. 'build' is your named build directory.

Build output will be placed in <source-root>:
{{{
 + build
 `------+ src
        `------+ lib
        |      `------+ tellapic.so
        |
        `------+ server
        |      `------+ server
        |
        `------+ swig
               `------+ python
               |      `------+ _pytellapic.so
               |      `------+ pytellapic.py
               |
               `------+ java
                      `------+ tellapicjava.jar
                      `------+ libtellapicjava.so (or tellapicjava.dll)
}}}

== List of files ==

|| *tellapic.so* || _is the native protocol library written in c._ ||
|| *server* || _is the server executable instance._ ||
|| *`_`pytellapic.so* || _is the SWIG generated library to interact with python programs._ ||
|| *pytellapic.py* || _is the SWIG generated python file for use within python programs._ ||
|| *tellapijava.jar* ||   _is the SWIG generated java JNI classes._ ||
|| *libtellapicjava.so* || _is the linux java native library._ ||
|| *tellapicjava.dll* || _is the windows java native library._ ||